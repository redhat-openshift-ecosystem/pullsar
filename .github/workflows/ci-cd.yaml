name: Test, build, push and deploy

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, labeled]
  workflow_dispatch:

jobs:
  test-and-lint:
    name: Run unit tests and linters
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v4

      - name: Set up Node.js with pnpm caching
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'pnpm'

      - name: Install Poetry
        uses: snok/install-poetry@v1.4.1

      - name: Install Kerberos development libraries for worker
        run: sudo apt-get update && sudo apt-get install -y libkrb5-dev

      - name: Install root and web app dependencies
        run: pnpm install

      - name: Install Python dependencies for worker
        run: poetry install --no-interaction --no-root
        working-directory: ./apps/worker

      - name: Install Python dependencies for api
        run: poetry install --no-interaction --no-root
        working-directory: ./apps/api

      - name: Run linters for all apps
        run: pnpm lint

      - name: Run tests for all apps
        run: pnpm test

      - name: Build all apps
        run: pnpm build

  set-image-suffix:
    name: Generate image suffix
    runs-on: ubuntu-latest
    outputs:
      image_suffix: ${{ steps.vars.outputs.image_suffix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate image suffix
        id: vars
        run: |
          GIT_SHA=$(git rev-parse --short "$GITHUB_SHA")
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "image_suffix=pr-${{ github.event.number }}-${GIT_SHA}" >> "$GITHUB_OUTPUT"
          else
            echo "image_suffix=${GIT_SHA}" >> "$GITHUB_OUTPUT"
          fi

  build-and-push:
    name: Build and push images of changed services
    runs-on: ubuntu-latest
    needs: [set-image-suffix, test-and-lint]
    outputs:
      api: ${{ steps.vars.outputs.api }}
      web: ${{ steps.vars.outputs.web }}
      worker: ${{ steps.vars.outputs.worker }}
    strategy:
      matrix:
        service: [worker, api, web]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files: apps/${{ matrix.service }}/**

      - name: Log in to Quay.io
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: redhat-actions/podman-login@v1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}

      - name: Build and push image
        id: vars
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          SUFFIX="${{ needs.set-image-suffix.outputs.image_suffix }}"
          IMAGE_TAG="${{ secrets.QUAY_REPO }}:${{ matrix.service }}-${SUFFIX}"
          
          echo "Building and pushing image: ${IMAGE_TAG}"
          
          podman build -f ./apps/${{ matrix.service }}/Containerfile -t ${IMAGE_TAG} .
          podman push ${IMAGE_TAG}

          echo "${{ matrix.service }}=true" >> "$GITHUB_OUTPUT"

  set-ansible-tags:
    name: Generate Ansible deployment tags
    runs-on: ubuntu-latest
    needs: build-and-push
    outputs:
      ansible_tags: ${{ steps.vars.outputs.ansible_tags }}
      should_deploy: ${{ steps.vars.outputs.should_deploy }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changed config files
        id: changed-config-files
        uses: tj-actions/changed-files@v44
        with:
          files: |
            ansible/**
            .github/workflows/**

      - name: Generate Ansible deployment tags
        id: vars
        run: |
          ANSIBLE_TAGS=""
          if [[ "${{ needs.build-and-push.outputs.api }}" == "true" ]]; then
            ANSIBLE_TAGS+=" --tags api"
          fi
          if [[ "${{ needs.build-and-push.outputs.web }}" == "true" ]]; then
            ANSIBLE_TAGS+=" --tags web"
          fi
          if [[ "${{ needs.build-and-push.outputs.worker }}" == "true" ]]; then
            ANSIBLE_TAGS+=" --tags worker"
          fi
          if [[ "${{ steps.changed-config-files.outputs.any_changed }}" == "true" ]]; then
            ANSIBLE_TAGS+=" --tags always"
          fi

          if [[ -z "$ANSIBLE_TAGS" ]]; then
            echo "should_deploy=false" >> "$GITHUB_OUTPUT"
          else
            echo "should_deploy=true" >> "$GITHUB_OUTPUT"
            echo "ansible_tags=$ANSIBLE_TAGS" >> "$GITHUB_OUTPUT"
          fi

  deploy-stage:
    name: Deploy changed services to stage
    runs-on: ubuntu-latest
    needs: [set-image-suffix, set-ansible-tags]
    if: github.event_name == 'pull_request' && needs.set-ansible-tags.outputs.should_deploy == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Ansible deployment for stage
        run: |
          ansible-playbook ansible/playbooks/deploy.yml \
            ${{ needs.set-ansible-tags.outputs.ansible_tags }} \
            -e "env=stage" \
            -e "openshift_server=${{ secrets.OPENSHIFT_SERVER_STAGE }}" \
            -e "openshift_token=${{ secrets.OPENSHIFT_TOKEN_STAGE }}" \
            -e "image_repo=${{ secrets.QUAY_REPO }}" \
            -e "image_suffix=${{ needs.set-image-suffix.outputs.image_suffix }}"

  deploy-prod:
    name: Deploy changed services to production
    runs-on: ubuntu-latest
    needs: [set-image-suffix, set-ansible-tags]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.set-ansible-tags.outputs.should_deploy == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Ansible deployment for production
        run: |
          ansible-playbook ansible/playbooks/deploy.yml \
            ${{ needs.set-ansible-tags.outputs.ansible_tags }} \
            -e "env=prod" \
            -e "openshift_server=${{ secrets.OPENSHIFT_SERVER_PROD }}" \
            -e "openshift_token=${{ secrets.OPENSHIFT_TOKEN_PROD }}" \
            -e "image_repo=${{ secrets.QUAY_REPO }}" \
            -e "image_suffix=${{ needs.set-image-suffix.outputs.image_suffix }}"
